This is a demo project to learn and understand the principles of redux-toolkit. A very basic version of the topic has been covered in a step-by-step manner. We have used all the latest versions of the packages available upto date.
We have used Node v18.16.0 LTS, with "yarn" as a package manager. The boiler plate code has been created via "Vite". We have used Tailwind CSS with SASS configuration. And we have also used React Router v6 for our routings.
Mordern development standards with production level folder structures has been used.
We have not hosted this project as this is a very basic project for a demo purpose.
If you close this project, just make sure to have Node version >18, and run the following commands:
- yarn
- yarn dev
Go through the steps one by one and you will understand the flow. All the best.


->  Project setup:
    -   At your desired directory, run command "yarn create vite ." followed by "yarn" and "yarn dev". Choose for JS (not swc) for this project.
    -   Delete all the unwanted files.
    -   INSTALL: yarn add redux react-redux @reduxjs/toolkit sass sass-loader node-sass react-router-dom tailwindcss postcss autoprefixer axios
    -   INSTALL: npx tailwindcss init -y
    -   Update the content of tailwind.config.js file's content for "content: ["./src/**/*.{html,js,jsx}"],". SOURCE: https://tailwindcss.com/docs/content-configuration
    -   Update vite.config.js for sass:
            export default defineConfig({
                ...
                css: {
                    preprocessorOptions: {
                    sass: {},
                    },
                },
            });
    -   Include the tailwind header to your main.scss file aling with a test sass class
            @tailwind base;
            @tailwind components;
            @tailwind utilities;
    -   Import these to your main.jsx file and update App.jsx file content for tesing sass and tailwind.

Folder structure got created.
Needed files got created.

->  API:
    We are useing OMDB Api service for this project. SOURCE: https://www.omdbapi.com/
    We need to have the api key, so build one bu heading towards to the "ApiKey" tab on the site, fill up the details and an api key will be emailed to you.

Then we have just defined a constant file and exported the apikey.
We have also created an movieApi.js file that imports axios and creates a base url for the required api calls in this project.
We are now moving towards the routing, which is going to be defined inside 'App.jsx' file.

->  Routing:
    Basic routings done for component rendering. Flow is like follows:
        Header
        Home - Movie listing - Movie Details - 404
        Footer

->  Populating movie data:
    -   Added api call at the Home.jsx useEffect

->  Implementing Redux:
    SOURCE: https://redux-toolkit.js.org/tutorials/quick-start
    -   Maintain the folder structure
        src > store > store.js 
                    + features > movies
    -   Inside the store.js file, configure the store and use export the store to be included in the project.
            import { configureStore } from "@reduxjs/toolkit";
            export const store = configureStore({
                reducer: {}
            });
    -   In main.jsx, import Provider, store and implement to App.
            ...
            import { Provider } from "react-redux";
            import { store } from "./store/store";
            ...
            ...(
            ...
                <Provider store={store}>
                    <App />
                </Provider>
            ...
            )
    -   Create the slice in features
        -   import { createSlice } from "@reduxjs/toolkit";
        -   Set initial value
                const initialValues = {
                    movies: [],
                };
        -   Create a slice:
                const movieSlice = createSlice({
                    name: "movieslice",
                    initialState: initialValues,
                    reducers: {
                        addMovies: (state, { payload }) => {
                            state.movies = payload;
                        },
                    },
                });
        -   export const { addMovies } = movieSlice.actions; // action to store data in redux
            export const getAllMovies = (state) => state.movieslice.movies; // 
            export default movieSlice.reducer; // Reducer to pass in in the store
    -   
    -   In Home.jsx we are getting the API response. There,
        1.  import { useDispatch } from "react-redux";
        2.  import { addMovies } from "../store/features/movies/movieSlice"; // action
        3.  const dispatch = useDispatch();
        4.  dispatch(addMovies(response.data.Search)); // stores data in redux
With these the data will get stored inside the redux. 
Now we need to access the data and populate list.
Now er will update the MovieListing.jsx file.
    -   Populating redux data:
        1.  import { useSelector } from "react-redux"; // This will select the state reducer data
        2.  import { getAllMovies } from "../store/features/movies/movieSlice"; // This has access of a particular state value, in this case 'movies' from 'movieSlice'.
        3.  const movies = useSelector(getAllMovies); // movies will have the reducer value
Based on this we are populating some cards. These cards will be redirected to the details component.
In the mean time we will understand how to implement middleware with redux toolkit.
We were fetching the API in the home component and storing the data in redux till now with a synchronus action creator. But this can be upgraded with and asynchronus action creator in the slice itself with middleware thunk.
So in the slice file,
    -   import { ... createAsyncThunk } from "@reduxjs/toolkit";
    -   Create an export function with createAsyncThunk. The function takes 3 paramters.
        1.  Thunk name => convention is <Name_of_the_slice>/<Async_function_name>
        2.  Async function => With await call that returns the value. We don't need to dispatch like we did in the Home.jsx component.
        3.  An object => Not used till now.
    -   This thunk needs to be defined in the slice to access the store, and this will get defined as "extraReducers" property like follows.
            {
                [fetchAsyncMovies.pending]: () => console.log("Fetching..."),
                [fetchAsyncMovies.fulfilled]: (state, { payload }) => {
                    console.log("Fetched successfully.");
                    return { ...state, movies: payload };
                },
                [fetchAsyncMovies.rejected]: () => console.log("Fetch call rejected."),
            }
    -   And in the Home.jsx file we'll remove the previos synchronus action creator with a dispatch of this asynchronus action creator by importing it.
            import { fetchAsyncMovies } from "../store/features/movies/movieSlice";
            dispatch(fetchAsyncMovies(<Props_if_any>));
We can check the console for the different stages of the reducer in action.
We have also applied a 'search' functionality based on what we have lelarned so far. We are taking the name as input and type which are allowed by the api(See documentation of OMDB Api).
Now we will populate data on the details page based on the card selection.
For this we are again using the same approach of API call this time using async action creator from the begining. The initial value and store reducer handling are slightly modified for better understanding.
We have used useparams() to get the selected item id from the query and rest is the same.
When we move back an forth between listing and details page, we can see that the previous details are getting stored.
To avoid this we are using a clean-up function, which will clear the redus when the details component unmounts.
This cleanup action is not a async one, so we will define this one in the "reducers" property and then will export.